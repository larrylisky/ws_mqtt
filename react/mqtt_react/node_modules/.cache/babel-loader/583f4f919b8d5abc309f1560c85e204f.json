{"ast":null,"code":"'use strict';\n\nvar tls = require('tls');\n\nvar debug = require('debug')('mqttjs:tls');\n\nfunction buildBuilder(mqttClient, opts) {\n  var connection;\n  opts.port = opts.port || 8883;\n  opts.host = opts.hostname || opts.host || 'localhost';\n  opts.servername = opts.host;\n  opts.rejectUnauthorized = opts.rejectUnauthorized !== false;\n  delete opts.path;\n  debug('port %d host %s rejectUnauthorized %b', opts.port, opts.host, opts.rejectUnauthorized);\n  connection = tls.connect(opts);\n  /* eslint no-use-before-define: [2, \"nofunc\"] */\n\n  connection.on('secureConnect', function () {\n    if (opts.rejectUnauthorized && !connection.authorized) {\n      connection.emit('error', new Error('TLS not authorized'));\n    } else {\n      connection.removeListener('error', handleTLSerrors);\n    }\n  });\n\n  function handleTLSerrors(err) {\n    // How can I get verify this error is a tls error?\n    if (opts.rejectUnauthorized) {\n      mqttClient.emit('error', err);\n    } // close this connection to match the behaviour of net\n    // otherwise all we get is an error from the connection\n    // and close event doesn't fire. This is a work around\n    // to enable the reconnect code to work the same as with\n    // net.createConnection\n\n\n    connection.end();\n  }\n\n  connection.on('error', handleTLSerrors);\n  return connection;\n}\n\nmodule.exports = buildBuilder;","map":{"version":3,"sources":["/Users/larry/Software/react/mqtt_react/node_modules/mqtt/lib/connect/tls.js"],"names":["tls","require","debug","buildBuilder","mqttClient","opts","connection","port","host","hostname","servername","rejectUnauthorized","path","connect","on","authorized","emit","Error","removeListener","handleTLSerrors","err","end","module","exports"],"mappings":"AAAA;;AACA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAZ;;AAEA,SAASE,YAAT,CAAuBC,UAAvB,EAAmCC,IAAnC,EAAyC;AACvC,MAAIC,UAAJ;AACAD,EAAAA,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACE,IAAL,IAAa,IAAzB;AACAF,EAAAA,IAAI,CAACG,IAAL,GAAYH,IAAI,CAACI,QAAL,IAAiBJ,IAAI,CAACG,IAAtB,IAA8B,WAA1C;AACAH,EAAAA,IAAI,CAACK,UAAL,GAAkBL,IAAI,CAACG,IAAvB;AAEAH,EAAAA,IAAI,CAACM,kBAAL,GAA0BN,IAAI,CAACM,kBAAL,KAA4B,KAAtD;AAEA,SAAON,IAAI,CAACO,IAAZ;AAEAV,EAAAA,KAAK,CAAC,uCAAD,EAA0CG,IAAI,CAACE,IAA/C,EAAqDF,IAAI,CAACG,IAA1D,EAAgEH,IAAI,CAACM,kBAArE,CAAL;AAEAL,EAAAA,UAAU,GAAGN,GAAG,CAACa,OAAJ,CAAYR,IAAZ,CAAb;AACA;;AACAC,EAAAA,UAAU,CAACQ,EAAX,CAAc,eAAd,EAA+B,YAAY;AACzC,QAAIT,IAAI,CAACM,kBAAL,IAA2B,CAACL,UAAU,CAACS,UAA3C,EAAuD;AACrDT,MAAAA,UAAU,CAACU,IAAX,CAAgB,OAAhB,EAAyB,IAAIC,KAAJ,CAAU,oBAAV,CAAzB;AACD,KAFD,MAEO;AACLX,MAAAA,UAAU,CAACY,cAAX,CAA0B,OAA1B,EAAmCC,eAAnC;AACD;AACF,GAND;;AAQA,WAASA,eAAT,CAA0BC,GAA1B,EAA+B;AAC7B;AACA,QAAIf,IAAI,CAACM,kBAAT,EAA6B;AAC3BP,MAAAA,UAAU,CAACY,IAAX,CAAgB,OAAhB,EAAyBI,GAAzB;AACD,KAJ4B,CAM7B;AACA;AACA;AACA;AACA;;;AACAd,IAAAA,UAAU,CAACe,GAAX;AACD;;AAEDf,EAAAA,UAAU,CAACQ,EAAX,CAAc,OAAd,EAAuBK,eAAvB;AACA,SAAOb,UAAP;AACD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBpB,YAAjB","sourcesContent":["'use strict'\r\nvar tls = require('tls')\r\nvar debug = require('debug')('mqttjs:tls')\r\n\r\nfunction buildBuilder (mqttClient, opts) {\r\n  var connection\r\n  opts.port = opts.port || 8883\r\n  opts.host = opts.hostname || opts.host || 'localhost'\r\n  opts.servername = opts.host\r\n\r\n  opts.rejectUnauthorized = opts.rejectUnauthorized !== false\r\n\r\n  delete opts.path\r\n\r\n  debug('port %d host %s rejectUnauthorized %b', opts.port, opts.host, opts.rejectUnauthorized)\r\n\r\n  connection = tls.connect(opts)\r\n  /* eslint no-use-before-define: [2, \"nofunc\"] */\r\n  connection.on('secureConnect', function () {\r\n    if (opts.rejectUnauthorized && !connection.authorized) {\r\n      connection.emit('error', new Error('TLS not authorized'))\r\n    } else {\r\n      connection.removeListener('error', handleTLSerrors)\r\n    }\r\n  })\r\n\r\n  function handleTLSerrors (err) {\r\n    // How can I get verify this error is a tls error?\r\n    if (opts.rejectUnauthorized) {\r\n      mqttClient.emit('error', err)\r\n    }\r\n\r\n    // close this connection to match the behaviour of net\r\n    // otherwise all we get is an error from the connection\r\n    // and close event doesn't fire. This is a work around\r\n    // to enable the reconnect code to work the same as with\r\n    // net.createConnection\r\n    connection.end()\r\n  }\r\n\r\n  connection.on('error', handleTLSerrors)\r\n  return connection\r\n}\r\n\r\nmodule.exports = buildBuilder\r\n"]},"metadata":{},"sourceType":"script"}